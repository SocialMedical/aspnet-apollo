@model Sic.Apollo.Models.Pro.ProfessionalExperience
@{
    ViewBag.ProfessionalExperienceId = Model.ProfessionalExperienceId;
    ViewBag.ProfessionalId = Model.ProfessionalId;
    ViewBag.InstitutionId = Model.InstitutionId;
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<div class="list_content_edit_box">
    @using (Html.BeginForm("", "", FormMethod.Post, new { id="editExperienceForm"}))
    {
        @Html.HiddenFor(model => model.InstitutionId)
        @Html.HiddenFor(model => model.ProfessionalExperienceId)
        
        <div class="edit_office_content_text">@Html.LabelFor(model => model.Name)</div>
        <div class="edit_office_content_input">
            @Html.TextAreaFor(model => model.Name, new { id = "ExperienceName", @class = "area_text" })
            <div>
                <span class="error_field">@Html.ValidationMessageFor(model => model.Name)</span>
            </div>
        </div>
        <div>
            <div class="edit_office_content_text">@Html.LabelFor(model => model.Description)</div>
            <div class="edit_office_content_input">
                @Html.TextAreaFor(model => model.Description, new { @class = "area_text medium_height" })
                <div>
                    <span class="error_field">@Html.ValidationMessageFor(model => model.Description)</span>
                </div>
            </div>
        </div>
        <div class="edit_office_content_text">@Html.LabelFor(model => model.StartYear)</div>
        <div class="edit_office_content_input">
            @Html.DropDownYearListFor(model => model.StartYear, new { @class = "select_date" })
            <div>
                <span class="error_field">@Html.ValidationMessageFor(model => model.StartYear)</span>
            </div>
        </div>
        <div class="edit_office_content_text">@Html.LabelFor(model => model.EndYear)</div>
        <div class="edit_office_content_input">
            @Html.DropDownYearListFor(model => model.EndYear, new { @class = "select_date" })
            <div>
                <span class="error_field">@Html.ValidationMessageFor(model => model.EndYear)</span>
            </div>
        </div>
        <div class="contet_buttons_edit">
            <div class="center_buttons_edit">
                @{
        var labelButton = Model.ProfessionalExperienceId == 0 ? Sic.Apollo.Resources.Resources.LabelForAdd : Sic.Apollo.Resources.Resources.LabelForEdit;
                }
                <div class="buttons_edit">
                    <input id="experienceSave" type="button" class="button_save_orange" value="@labelButton" />
                </div>
                <div class="buttons_edit">
                    <input id="experienceCancel" type="button" class="button_save_orange" value="@Sic.Apollo.Resources.Resources.LabelForCancel" />
                </div>
            </div>
        </div>
    }
</div>
<script>       
    $(function() {                
        if ($("#ExperienceName").val() == "" || $("#ExperienceName").val() == null) {
            $("#ExperienceName").focus();
        }
        else {
            $("#Description").focus();
        }
    });
    function refreshExperience() { 
        sicGet("@Url.Action("ExperienceIndex","Professional")", null, function(data){
            $('#divexperienceList').html(data);
            //$("#institutions").removeAttr("disabled");
            //$('#institutions').val("");            
        });        
    }    

    $(function () {       
     $("#experienceCancel").click(function () {
            refreshExperience();
          });
    });

    $(function () {       
        $("#experienceSave").click(function () {               
            if($('#editExperienceForm').valid() == false)   {   
                setMessage('@Sic.Apollo.Resources.Resources.MessageForVerifyIncorrectData', '@Sic.Constants.MessageType.Warning');          
                return;
            }                                        
            var experience = getExperience();
            if (experience == null) {                     
                return;
            }             
            sicPost("@Url.Action("EditExperience","Professional")", experience, function (data) {                
                refreshExperience();
                setMessage(data.Message, data.MessageType);
            });
        });
    });
    function getExperience() {
        var institutionId = @Html.Raw(Json.Encode(ViewBag.InstitutionId));
        var professionalId = @Html.Raw(Json.Encode(ViewBag.ProfessionalId));
        var professionalExperienceId = @Html.Raw(Json.Encode(ViewBag.ProfessionalExperienceId));
        var name = $("#ExperienceName").val();
        var description = $("#Description").val();
        var startYear = $("#StartYear").val();
        var endYear = $("#EndYear").val();                            
        return (name == "") ? null : { InstitutionId : institutionId, ProfessionalId: professionalId, ProfessionalExperienceId: professionalExperienceId, Name : name, Description: description, StartYear: startYear, EndYear: endYear } 
    }   
</script>
