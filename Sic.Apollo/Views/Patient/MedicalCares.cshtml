@model IEnumerable<Sic.Apollo.Models.Medical.MedicalCare>
@using Sic.Apollo
<h2>@Sic.Apollo.Resources.Resources.LabelForMedicalHistories</h2>
<div style="display:none">
@{Html.RenderPartial("MedicationPrint", (Sic.Apollo.Models.Pro.Professional)ViewBag.Professional);}  
</div>
<div class="scrollTabs">
    <div class="arrow_tab5">
    </div>
    <div id="medicalCareContentMessage">        
    </div>
    <div class="content_tab2">        
        <div class="add_office" style="cursor:pointer; height:20px" onclick="javascript:editMedicalCare(0);">
            @Sic.Apollo.Resources.Resources.LabelForAdd
        </div>        
        <div id="editMedicalCare0" class="evolutioneditcontent" style="position:relative;">  
            @*@{Html.RenderPartial("EditMedicalCare", new Sic.Apollo.Models.Medical.MedicalCare());}  *@        
        </div>
        <br />
        <div style="margin-top:50px" class="txt_az_18">
            @Sic.Apollo.Resources.Resources.LegendForPreviousMedicalHistory
        </div>
        <br />
        <ul id="medicalHistories" class="medicalcare_list">
            <li id="newMedicalHistory"></li>
            @if (Model.Any())
            {
                int i = 0;
                foreach (var evolution in Model.OrderByDescending(p => p.EvolutionDate))
                {
                    string style = "";
                    if (i++ % 2 == 0)
                    {
                        style = "lineOne";
                    }
                    else
                    {
                        style = "lineTwo";
                    }     
                    <li id="medicalcareitemrow@{@evolution.MedicalCareId}" class="medicalcare_item @{@(" ")} @{@style}">                           
                        @{Html.RenderPartial("MedicalCare", evolution);}                                                
                    </li>    
                    <div class="linebreak"></div>                
                }
            }
            else
            {
                <div class="linebreak"></div>  
                <div class="box_text_message">
                    @Sic.Apollo.Resources.Resources.LegendForEmptyPreviousMedicalHistory</div>
            }
        </ul>
    </div>
</div>
<script>        
    var divEditMedicalCare = "";    
    function deleteMedicalCare(medicalCareId,patientId){
        openDialog("@Html.Raw(Sic.Apollo.Resources.Resources.MessageForDeleteMedicalCareConfirmation)","confirmation","deleteMedicalCareConfirmation(" + medicalCareId + ")");
    } 
    function deleteMedicalCareConfirmation(medicalCareId){
        closeDialog();
        sicPost("/Patient/DeleteMedicalCare", { MedicalCareId:medicalCareId }, 
            function (data) {              
                $("#contentPanelMessage").appendTo("#medicalCareContentMessage");               
                setMessage(data.Message,"success");
                if(data.Success)
                {  
                    $("#medicalCareItem" + medicalCareId).empty();
                    $("#medicalcareitemrow" + medicalCareId).removeClass("medicalcare_item");
                    $("#medicalcareitemrow" + medicalCareId).hide();
                    refreshResumeEpicrisis(getCurrentPatientId(), 'medicalCare');
                }
        });        
    }
    function clearMedicalCare(){
        $("#newEvolution").val('');
        $("#newDiagnostic").val('');
        $("#newTreatment").val('');
        $.each($("[name='medicineName'],[name='quantity'],[name='posology']"), function(i,val){
            $(val).val('');
        });
        $.each($("[medicineitem]"), function(i,val){
            $(val).attr('pvid','');
            $(val).attr('gid','');
        });
    }
    function moreShowMedication(){
        var section = $("#medicationBreak2");
        section.show('fast');
        $("#showMoreMedication").hide();                
    }
    function lessShowMedication(){
        var section = $("#medicationBreak2");
        section.hide('fast');
        $("#showMoreMedication").show();
    }    
    function editMedicalCare(medicalCareId){
        if(divEditMedicalCare != '') $(divEditMedicalCare).empty();

        sicGet("@Url.Action("EditMedicalCare", "Patient")",{medicalCareId:medicalCareId},
        function(content)
        {
            divEditMedicalCare = '#editMedicalCare' + medicalCareId; 
            $(divEditMedicalCare).html(content);
        });
    }
    function cancelUpdateMedicalHistory(){
        $(divEditMedicalCare).empty();
    }    

    function updateMedicalHistory(medicalCareId,print) {
        var evolution = $("#newEvolution").val();
        var diagnostic = $("#newDiagnostic").val();
        var treatment = $("#newTreatment").val();
        var medications = "<medication>";        
        var dateTicks = sicGetTicks($("#medicalCareDateInput").datepicker("getDate"));
        $.each($("[medicineitem]"), function (i, val) {
            var medname = $.trim($(val).find("[name='medicineName']").val());
            if(medname!='')
            {
                var q = $.trim($(val).find("[name='quantity']").val());
                var pvid = $(val).attr("pvid");
                var gid = $(val).attr("gid");
                if(q=='') q='1';
                if(pvid===undefined || pvid=='') pvid='0';
                if(gid===undefined || gid=='') gid='0';
                medications += '<me id="' + $(val).attr("medicineid") + '"';
                medications += ' pvid="' + pvid + '"';
                medications += ' gid="' + gid + '"';
                medications += ' pos="' + $(val).find("[name='posology']").val() + '"';
                medications += ' q="' + q + '"';
                medications += ' pr="' + $(val).attr("medicineitem") + '"';
                medications += ' name="' + medname + '"/>';
            }
        });
        medications += "</medication>";        
        if ($("#patientEvolutionForm").valid()) {
            sicPost("@Url.Action("UpdateMedicalCare", "Patient")", {
                PatientId: getCurrentPatientId(), MedicalCareId: medicalCareId, Evolution: evolution,
                Diagnostic: diagnostic, Treatment: treatment, EvolutionDateTicks : dateTicks,
                MedicationsClientXml : medications }, 
            function (data) {              
                $("#contentPanelMessage").appendTo("#medicalCareContentMessage");               
                setMessage(data.Message,"success");
                if(data.Success)
                {               
                    clearMedicalCare();     
                    sicGet("@Url.Action("MedicalCare", "Patient")",{medicalHistoryId:data.MedicalHistoryId},
                    function(content)
                    {
                        if(medicalCareId == 0)
                        {
                            $("#newMedicalHistory").html(content);    
                            $("#newMedicalHistory").addClass("medicalcare_item");
                            $("#newMedicalHistory").attr('id','medicalHistory' + data.MedicalHistoryId);                            
                            $('#medicalHistories').prepend('<div id="newMedicalHistory"></div>');
                        }
                        else
                        {
                            $("#medicalCareItem" + medicalCareId).html(content);
                        }

                        setTimeout(function(){
                            if(print) printMedications(data.MedicalHistoryId); 
                            }, 200);

                        $(divEditMedicalCare).empty();
                        refreshResumeEpicrisis(getCurrentPatientId(), 'medicalCare');
                    });
                }                
            });             
        }
    }
</script>
